// This is the backend code for reading and writing

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;

namespace Io.Bigfast
{
    [System.Serializable()]
    public partial class PlayerStateAction
    {
        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerStateAction Deserialize(Stream stream)
        {
            PlayerStateAction instance = new PlayerStateAction();
            Deserialize(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerStateAction DeserializeLengthDelimited(Stream stream)
        {
            PlayerStateAction instance = new PlayerStateAction();
            DeserializeLengthDelimited(stream, instance);
            return instance;
        }

        /// <summary>Helper: create a new instance to deserializing into</summary>
        public static PlayerStateAction DeserializeLength(Stream stream, int length)
        {
            PlayerStateAction instance = new PlayerStateAction();
            DeserializeLength(stream, length, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
        public static PlayerStateAction Deserialize(byte[] buffer)
        {
            PlayerStateAction instance = new PlayerStateAction();
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
        public static Io.Bigfast.PlayerStateAction Deserialize(byte[] buffer, Io.Bigfast.PlayerStateAction instance)
        {
            using (var ms = new MemoryStream(buffer))
                Deserialize(ms, instance);
            return instance;
        }

        /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
        public static Io.Bigfast.PlayerStateAction Deserialize(Stream stream, Io.Bigfast.PlayerStateAction instance)
        {
            if (instance.TeamState == null)
                instance.TeamState = new List<Io.Bigfast.PlayerStateAction.GameState>();
            if (instance.OpponentState == null)
                instance.OpponentState = new List<Io.Bigfast.PlayerStateAction.GameState>();
            while (true)
            {
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    break;
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ChannelId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PlayId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.PlayerState == null)
                            instance.PlayerState = Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream);
                        else
                            Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream, instance.PlayerState);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        instance.TeamState.Add(Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        // repeated
                        instance.OpponentState.Add(Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.PlayerAction == null)
                            instance.PlayerAction = Io.Bigfast.PlayerStateAction.Action.DeserializeLengthDelimited(stream);
                        else
                            Io.Bigfast.PlayerStateAction.Action.DeserializeLengthDelimited(stream, instance.PlayerAction);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Io.Bigfast.PlayerStateAction DeserializeLengthDelimited(Stream stream, Io.Bigfast.PlayerStateAction instance)
        {
            if (instance.TeamState == null)
                instance.TeamState = new List<Io.Bigfast.PlayerStateAction.GameState>();
            if (instance.OpponentState == null)
                instance.OpponentState = new List<Io.Bigfast.PlayerStateAction.GameState>();
            long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
            limit += stream.Position;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ChannelId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PlayId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.PlayerState == null)
                            instance.PlayerState = Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream);
                        else
                            Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream, instance.PlayerState);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        instance.TeamState.Add(Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        // repeated
                        instance.OpponentState.Add(Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.PlayerAction == null)
                            instance.PlayerAction = Io.Bigfast.PlayerStateAction.Action.DeserializeLengthDelimited(stream);
                        else
                            Io.Bigfast.PlayerStateAction.Action.DeserializeLengthDelimited(stream, instance.PlayerAction);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
        public static Io.Bigfast.PlayerStateAction DeserializeLength(Stream stream, int length, Io.Bigfast.PlayerStateAction instance)
        {
            if (instance.TeamState == null)
                instance.TeamState = new List<Io.Bigfast.PlayerStateAction.GameState>();
            if (instance.OpponentState == null)
                instance.OpponentState = new List<Io.Bigfast.PlayerStateAction.GameState>();
            long limit = stream.Position + length;
            while (true)
            {
                if (stream.Position >= limit)
                {
                    if (stream.Position == limit)
                        break;
                    else
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                }
                int keyByte = stream.ReadByte();
                if (keyByte == -1)
                    throw new System.IO.EndOfStreamException();
                // Optimized reading of known fields with field ID < 16
                switch (keyByte)
                {
                    // Field 1 LengthDelimited
                    case 10:
                        instance.ChannelId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 2 LengthDelimited
                    case 18:
                        instance.UserId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 3 LengthDelimited
                    case 26:
                        instance.PlayId = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadString(stream);
                        continue;
                    // Field 4 Varint
                    case 32:
                        instance.Timestamp = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt64(stream);
                        continue;
                    // Field 5 LengthDelimited
                    case 42:
                        if (instance.PlayerState == null)
                            instance.PlayerState = Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream);
                        else
                            Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream, instance.PlayerState);
                        continue;
                    // Field 6 LengthDelimited
                    case 50:
                        // repeated
                        instance.TeamState.Add(Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 7 LengthDelimited
                    case 58:
                        // repeated
                        instance.OpponentState.Add(Io.Bigfast.PlayerStateAction.GameState.DeserializeLengthDelimited(stream));
                        continue;
                    // Field 8 LengthDelimited
                    case 66:
                        if (instance.PlayerAction == null)
                            instance.PlayerAction = Io.Bigfast.PlayerStateAction.Action.DeserializeLengthDelimited(stream);
                        else
                            Io.Bigfast.PlayerStateAction.Action.DeserializeLengthDelimited(stream, instance.PlayerAction);
                        continue;
                }

                var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                // Reading field ID > 16 and unknown field ID/wire type combinations
                switch (key.Field)
                {
                    case 0:
                        throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                    default:
                        global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                        break;
                }
            }

            return instance;
        }

        /// <summary>Serialize the instance into the stream</summary>
        public static void Serialize(Stream stream, PlayerStateAction instance)
        {
            var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
            if (instance.ChannelId != null)
            {
                // Key for field: 1, LengthDelimited
                stream.WriteByte(10);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.ChannelId));
            }
            if (instance.UserId != null)
            {
                // Key for field: 2, LengthDelimited
                stream.WriteByte(18);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.UserId));
            }
            if (instance.PlayId != null)
            {
                // Key for field: 3, LengthDelimited
                stream.WriteByte(26);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBytes(stream, Encoding.UTF8.GetBytes(instance.PlayId));
            }
            // Key for field: 4, Varint
            stream.WriteByte(32);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt64(stream, instance.Timestamp);
            if (instance.PlayerState != null)
            {
                // Key for field: 5, LengthDelimited
                stream.WriteByte(42);
                ﻿msField.SetLength(0);
                Io.Bigfast.PlayerStateAction.GameState.Serialize(msField, instance.PlayerState);
                // Length delimited byte array
                uint length5 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length5);
                stream.Write(msField.GetBuffer(), 0, (int)length5);

            }
            if (instance.TeamState != null)
            {
                foreach (var i6 in instance.TeamState)
                {
                    // Key for field: 6, LengthDelimited
                    stream.WriteByte(50);
                    ﻿msField.SetLength(0);
                    Io.Bigfast.PlayerStateAction.GameState.Serialize(msField, i6);
                    // Length delimited byte array
                    uint length6 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length6);
                    stream.Write(msField.GetBuffer(), 0, (int)length6);

                }
            }
            if (instance.OpponentState != null)
            {
                foreach (var i7 in instance.OpponentState)
                {
                    // Key for field: 7, LengthDelimited
                    stream.WriteByte(58);
                    ﻿msField.SetLength(0);
                    Io.Bigfast.PlayerStateAction.GameState.Serialize(msField, i7);
                    // Length delimited byte array
                    uint length7 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length7);
                    stream.Write(msField.GetBuffer(), 0, (int)length7);

                }
            }
            if (instance.PlayerAction != null)
            {
                // Key for field: 8, LengthDelimited
                stream.WriteByte(66);
                ﻿msField.SetLength(0);
                Io.Bigfast.PlayerStateAction.Action.Serialize(msField, instance.PlayerAction);
                // Length delimited byte array
                uint length8 = (uint)msField.Length;
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length8);
                stream.Write(msField.GetBuffer(), 0, (int)length8);

            }
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
        }

        /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
        public static byte[] SerializeToBytes(PlayerStateAction instance)
        {
            using (var ms = new MemoryStream())
            {
                Serialize(ms, instance);
                return ms.ToArray();
            }
        }
        /// <summary>Helper: Serialize with a varint length prefix</summary>
        public static void SerializeLengthDelimited(Stream stream, PlayerStateAction instance)
        {
            var data = SerializeToBytes(instance);
            global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
            stream.Write(data, 0, data.Length);
        }

        [System.Serializable()]
        public partial class Position
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Position Deserialize(Stream stream)
            {
                Position instance = new Position();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Position DeserializeLengthDelimited(Stream stream)
            {
                Position instance = new Position();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Position DeserializeLength(Stream stream, int length)
            {
                Position instance = new Position();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static Position Deserialize(byte[] buffer)
            {
                Position instance = new Position();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Io.Bigfast.PlayerStateAction.Position Deserialize(byte[] buffer, Io.Bigfast.PlayerStateAction.Position instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Position Deserialize(Stream stream, Io.Bigfast.PlayerStateAction.Position instance)
            {
                BinaryReader br = new BinaryReader(stream);
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Fixed32
                        case 13:
                            instance.X = br.ReadSingle();
                            continue;
                        // Field 2 Fixed32
                        case 21:
                            instance.Y = br.ReadSingle();
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.Z = br.ReadSingle();
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Position DeserializeLengthDelimited(Stream stream, Io.Bigfast.PlayerStateAction.Position instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Fixed32
                        case 13:
                            instance.X = br.ReadSingle();
                            continue;
                        // Field 2 Fixed32
                        case 21:
                            instance.Y = br.ReadSingle();
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.Z = br.ReadSingle();
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Position DeserializeLength(Stream stream, int length, Io.Bigfast.PlayerStateAction.Position instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Fixed32
                        case 13:
                            instance.X = br.ReadSingle();
                            continue;
                        // Field 2 Fixed32
                        case 21:
                            instance.Y = br.ReadSingle();
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.Z = br.ReadSingle();
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, Position instance)
            {
                BinaryWriter bw = new BinaryWriter(stream);
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Fixed32
                stream.WriteByte(13);
                bw.Write(instance.X);
                // Key for field: 2, Fixed32
                stream.WriteByte(21);
                bw.Write(instance.Y);
                // Key for field: 3, Fixed32
                stream.WriteByte(29);
                bw.Write(instance.Z);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(Position instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, Position instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        [System.Serializable()]
        public partial class Velocity
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Velocity Deserialize(Stream stream)
            {
                Velocity instance = new Velocity();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Velocity DeserializeLengthDelimited(Stream stream)
            {
                Velocity instance = new Velocity();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Velocity DeserializeLength(Stream stream, int length)
            {
                Velocity instance = new Velocity();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static Velocity Deserialize(byte[] buffer)
            {
                Velocity instance = new Velocity();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Io.Bigfast.PlayerStateAction.Velocity Deserialize(byte[] buffer, Io.Bigfast.PlayerStateAction.Velocity instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Velocity Deserialize(Stream stream, Io.Bigfast.PlayerStateAction.Velocity instance)
            {
                BinaryReader br = new BinaryReader(stream);
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Fixed32
                        case 13:
                            instance.X = br.ReadSingle();
                            continue;
                        // Field 2 Fixed32
                        case 21:
                            instance.Y = br.ReadSingle();
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.Z = br.ReadSingle();
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Velocity DeserializeLengthDelimited(Stream stream, Io.Bigfast.PlayerStateAction.Velocity instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Fixed32
                        case 13:
                            instance.X = br.ReadSingle();
                            continue;
                        // Field 2 Fixed32
                        case 21:
                            instance.Y = br.ReadSingle();
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.Z = br.ReadSingle();
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Velocity DeserializeLength(Stream stream, int length, Io.Bigfast.PlayerStateAction.Velocity instance)
            {
                BinaryReader br = new BinaryReader(stream);
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Fixed32
                        case 13:
                            instance.X = br.ReadSingle();
                            continue;
                        // Field 2 Fixed32
                        case 21:
                            instance.Y = br.ReadSingle();
                            continue;
                        // Field 3 Fixed32
                        case 29:
                            instance.Z = br.ReadSingle();
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, Velocity instance)
            {
                BinaryWriter bw = new BinaryWriter(stream);
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Fixed32
                stream.WriteByte(13);
                bw.Write(instance.X);
                // Key for field: 2, Fixed32
                stream.WriteByte(21);
                bw.Write(instance.Y);
                // Key for field: 3, Fixed32
                stream.WriteByte(29);
                bw.Write(instance.Z);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(Velocity instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, Velocity instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        [System.Serializable()]
        public partial class GameState
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static GameState Deserialize(Stream stream)
            {
                GameState instance = new GameState();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static GameState DeserializeLengthDelimited(Stream stream)
            {
                GameState instance = new GameState();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static GameState DeserializeLength(Stream stream, int length)
            {
                GameState instance = new GameState();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static GameState Deserialize(byte[] buffer)
            {
                GameState instance = new GameState();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Io.Bigfast.PlayerStateAction.GameState Deserialize(byte[] buffer, Io.Bigfast.PlayerStateAction.GameState instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.GameState Deserialize(Stream stream, Io.Bigfast.PlayerStateAction.GameState instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.Position == null)
                                instance.Position = Io.Bigfast.PlayerStateAction.Position.DeserializeLengthDelimited(stream);
                            else
                                Io.Bigfast.PlayerStateAction.Position.DeserializeLengthDelimited(stream, instance.Position);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            if (instance.Velocity == null)
                                instance.Velocity = Io.Bigfast.PlayerStateAction.Velocity.DeserializeLengthDelimited(stream);
                            else
                                Io.Bigfast.PlayerStateAction.Velocity.DeserializeLengthDelimited(stream, instance.Velocity);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.GameState DeserializeLengthDelimited(Stream stream, Io.Bigfast.PlayerStateAction.GameState instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.Position == null)
                                instance.Position = Io.Bigfast.PlayerStateAction.Position.DeserializeLengthDelimited(stream);
                            else
                                Io.Bigfast.PlayerStateAction.Position.DeserializeLengthDelimited(stream, instance.Position);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            if (instance.Velocity == null)
                                instance.Velocity = Io.Bigfast.PlayerStateAction.Velocity.DeserializeLengthDelimited(stream);
                            else
                                Io.Bigfast.PlayerStateAction.Velocity.DeserializeLengthDelimited(stream, instance.Velocity);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.GameState DeserializeLength(Stream stream, int length, Io.Bigfast.PlayerStateAction.GameState instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 LengthDelimited
                        case 10:
                            if (instance.Position == null)
                                instance.Position = Io.Bigfast.PlayerStateAction.Position.DeserializeLengthDelimited(stream);
                            else
                                Io.Bigfast.PlayerStateAction.Position.DeserializeLengthDelimited(stream, instance.Position);
                            continue;
                        // Field 2 LengthDelimited
                        case 18:
                            if (instance.Velocity == null)
                                instance.Velocity = Io.Bigfast.PlayerStateAction.Velocity.DeserializeLengthDelimited(stream);
                            else
                                Io.Bigfast.PlayerStateAction.Velocity.DeserializeLengthDelimited(stream, instance.Velocity);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, GameState instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                if (instance.Position != null)
                {
                    // Key for field: 1, LengthDelimited
                    stream.WriteByte(10);
                    ﻿msField.SetLength(0);
                    Io.Bigfast.PlayerStateAction.Position.Serialize(msField, instance.Position);
                    // Length delimited byte array
                    uint length1 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length1);
                    stream.Write(msField.GetBuffer(), 0, (int)length1);

                }
                if (instance.Velocity != null)
                {
                    // Key for field: 2, LengthDelimited
                    stream.WriteByte(18);
                    ﻿msField.SetLength(0);
                    Io.Bigfast.PlayerStateAction.Velocity.Serialize(msField, instance.Velocity);
                    // Length delimited byte array
                    uint length2 = (uint)msField.Length;
                    global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, length2);
                    stream.Write(msField.GetBuffer(), 0, (int)length2);

                }
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(GameState instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, GameState instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }


        [System.Serializable()]
        public partial class Action
        {
            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Action Deserialize(Stream stream)
            {
                Action instance = new Action();
                Deserialize(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Action DeserializeLengthDelimited(Stream stream)
            {
                Action instance = new Action();
                DeserializeLengthDelimited(stream, instance);
                return instance;
            }

            /// <summary>Helper: create a new instance to deserializing into</summary>
            public static Action DeserializeLength(Stream stream, int length)
            {
                Action instance = new Action();
                DeserializeLength(stream, length, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream and create a new instance to deserializing into</summary>
            public static Action Deserialize(byte[] buffer)
            {
                Action instance = new Action();
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Helper: put the buffer into a MemoryStream before deserializing</summary>
            public static Io.Bigfast.PlayerStateAction.Action Deserialize(byte[] buffer, Io.Bigfast.PlayerStateAction.Action instance)
            {
                using (var ms = new MemoryStream(buffer))
                    Deserialize(ms, instance);
                return instance;
            }

            /// <summary>Takes the remaining content of the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Action Deserialize(Stream stream, Io.Bigfast.PlayerStateAction.Action instance)
            {
                while (true)
                {
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        break;
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Up = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.Down = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.Left = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Right = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.Gas = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.Brake = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.Jump = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.Boost = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the VarInt length prefix and the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Action DeserializeLengthDelimited(Stream stream, Io.Bigfast.PlayerStateAction.Action instance)
            {
                long limit = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadUInt32(stream);
                limit += stream.Position;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Up = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.Down = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.Left = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Right = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.Gas = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.Brake = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.Jump = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.Boost = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Read the given number of bytes from the stream and deserialze it into the instance.</summary>
            public static Io.Bigfast.PlayerStateAction.Action DeserializeLength(Stream stream, int length, Io.Bigfast.PlayerStateAction.Action instance)
            {
                long limit = stream.Position + length;
                while (true)
                {
                    if (stream.Position >= limit)
                    {
                        if (stream.Position == limit)
                            break;
                        else
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Read past max limit");
                    }
                    int keyByte = stream.ReadByte();
                    if (keyByte == -1)
                        throw new System.IO.EndOfStreamException();
                    // Optimized reading of known fields with field ID < 16
                    switch (keyByte)
                    {
                        // Field 1 Varint
                        case 8:
                            instance.Up = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 2 Varint
                        case 16:
                            instance.Down = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 3 Varint
                        case 24:
                            instance.Left = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 4 Varint
                        case 32:
                            instance.Right = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 5 Varint
                        case 40:
                            instance.Gas = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 6 Varint
                        case 48:
                            instance.Brake = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 7 Varint
                        case 56:
                            instance.Jump = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                        // Field 8 Varint
                        case 64:
                            instance.Boost = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadBool(stream);
                            continue;
                    }

                    var key = global::SilentOrbit.ProtocolBuffers.ProtocolParser.ReadKey((byte)keyByte, stream);

                    // Reading field ID > 16 and unknown field ID/wire type combinations
                    switch (key.Field)
                    {
                        case 0:
                            throw new global::SilentOrbit.ProtocolBuffers.ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
                        default:
                            global::SilentOrbit.ProtocolBuffers.ProtocolParser.SkipKey(stream, key);
                            break;
                    }
                }

                return instance;
            }

            /// <summary>Serialize the instance into the stream</summary>
            public static void Serialize(Stream stream, Action instance)
            {
                var msField = global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Pop();
                // Key for field: 1, Varint
                stream.WriteByte(8);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Up);
                // Key for field: 2, Varint
                stream.WriteByte(16);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Down);
                // Key for field: 3, Varint
                stream.WriteByte(24);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Left);
                // Key for field: 4, Varint
                stream.WriteByte(32);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Right);
                // Key for field: 5, Varint
                stream.WriteByte(40);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Gas);
                // Key for field: 6, Varint
                stream.WriteByte(48);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Brake);
                // Key for field: 7, Varint
                stream.WriteByte(56);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Jump);
                // Key for field: 8, Varint
                stream.WriteByte(64);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteBool(stream, instance.Boost);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.Stack.Push(msField);
            }

            /// <summary>Helper: Serialize into a MemoryStream and return its byte array</summary>
            public static byte[] SerializeToBytes(Action instance)
            {
                using (var ms = new MemoryStream())
                {
                    Serialize(ms, instance);
                    return ms.ToArray();
                }
            }
            /// <summary>Helper: Serialize with a varint length prefix</summary>
            public static void SerializeLengthDelimited(Stream stream, Action instance)
            {
                var data = SerializeToBytes(instance);
                global::SilentOrbit.ProtocolBuffers.ProtocolParser.WriteUInt32(stream, (uint)data.Length);
                stream.Write(data, 0, data.Length);
            }
        }

    }

}
